(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{382:function(r,t,e){"use strict";e.r(t);var s=e(49),a=Object(s.a)({},(function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[r._v("#")]),r._v(" 介绍")]),r._v(" "),e("p",[r._v("Berry ORM 是一款为前端打造的对象关系映射库，她专注于且"),e("strong",[r._v("仅")]),r._v("专注于对象关系映射。换句话说，Berry ORM 是一个用来实现"),e("strong",[r._v("原始数据对象")]),r._v("和"),e("strong",[r._v("实体")]),r._v("之间互相转换的一个库。")]),r._v(" "),e("p",[r._v("Berry ORM 非常注重类型，所有的特性都具有非常严格的类型支持，以最大化地发挥 TypeScript 的优势。")]),r._v(" "),e("p",[r._v("你必须明白的是，Berry ORM 与后端常见的 ORM 库有很大的不同。后端的 ORM 库通常是一套完整的数据管理方案，映射对象间的关系只是其中的一部分功能。但 Berry ORM 恪守本分，仅仅负责映射对象间的关系，因为前端源通常是后端接口或 IndexedDB，而对于这些数据源已经存在无数成熟的解决方案了，你可以组合出最佳的选择来管理你的数据。")]),r._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[r._v("npm")]),r._v(" i berry-orm\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);