(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{384:function(t,e,r){"use strict";r.r(e);var s=r(49),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("Berry ORM 是一款用于 Node.js 和浏览器的轻量级对象关系映射器。")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i berry-orm\n")])])]),r("p",[t._v("Berry ORM 允许你通过定义实体类来在普通数据对象和实体之间进行转换。实体是实体类的实例，它允许你轻松地访问和更新双向关系。你也可以将实体转换回普通数据对象。")]),t._v(" "),r("p",[t._v("严格的类型是 Berry ORM 的重点，因此，所有的特性都具备有高级类型支持，以最大限度地发挥 TypeScript 的优势。")]),t._v(" "),r("p",[t._v("值得注意的是，Berry ORM 与传统的 ORM 概念并不相同。后者通常是一套完整的数据管理解决方案，包含了数据库层等等额外的功能，对象关系映射器仅仅是其中耦合的一部分，而前者则是一款通用的对象关系映射器，仅仅负责映射关系，你可以将其与其他数据管理解决方案自由组合使用。")]),t._v(" "),r("h1",{attrs:{id:"场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),r("ul",[r("li",[t._v("在 Web 应用中使用关系型的状态管理时")]),t._v(" "),r("li",[t._v("在 IndexedDB 中保存大量的关系型数据时")]),t._v(" "),r("li",[t._v("在“data.json”这样的简单文件中存储关系型数据时")]),t._v(" "),r("li",[t._v("任何不使用数据库但需要管理关系型数据的时候")])])])}),[],!1,null,null,null);e.default=a.exports}}]);