(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{383:function(t,r,e){"use strict";e.r(r);var s=e(49),n=Object(s.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),e("p",[t._v("Berry ORM 是一款为前端打造的对象关系映射库，允许你通过实体的属性直接访问关系对象，避免在前端项目中出现大量繁杂枯燥的关系处理代码。")]),t._v(" "),e("p",[t._v("Berry ORM 使用"),e("strong",[t._v("类")]),t._v("和"),e("strong",[t._v("装饰器")]),t._v("来定义实体，在采用了 Berry ORM 的应用中，每一个实体都将会是实体类的一个实例。因此，你可以很方便地使用 "),e("code",[t._v("instanceof")]),t._v(" 操作符来区分实体类型，也可以在实体类上定义方法、计算属性以更好地遵守"),e("strong",[t._v("单一职责原则（Single Responsibility Principle）")]),t._v("。")]),t._v(" "),e("p",[t._v("此外，Berry ORM 完全使用 TypeScript 编写，并具有复杂严格的类型以更好地保证类型安全。你将在使用的过程中体会到这些类型所带来的愉快的开发体验。")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i berry-orm\n")])])])])}),[],!1,null,null,null);r.default=n.exports}}]);