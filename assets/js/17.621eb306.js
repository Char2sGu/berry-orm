(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{378:function(t,s,r){"use strict";r.r(s);var e=r(49),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),r("p",[t._v("Berry ORM 是一款为前端打造的对象关系映射库，专注于且"),r("strong",[t._v("仅")]),t._v("专注于对象关系映射，这意味着 Berry ORM 不会接管你的存储需求，你可以自由选择存储方案。")]),t._v(" "),r("p",[t._v("Berry ORM 使用"),r("strong",[t._v("类")]),t._v("和"),r("strong",[t._v("装饰器")]),t._v("来定义实体，在采用了 Berry ORM 的应用中，每一个实体都将会是实体类的一个实例。因此，你可以很方便地使用 "),r("code",[t._v("instanceof")]),t._v(" 操作符来区分实体类型，也可以在实体类上定义方法、计算属性以更好地遵守"),r("strong",[t._v("单一职责原则（Single Responsibility Principle）")]),t._v("。")]),t._v(" "),r("p",[t._v("此外，Berry ORM 完全使用 TypeScript 编写，并具有复杂严格的类型以更好地保证类型安全。你将在使用的过程中体会到这些类型所带来的愉快的开发体验。")]),t._v(" "),r("div",{staticClass:"language-sh extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sh"}},[r("code",[r("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i berry-orm\n")])])]),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),r("p",[t._v("Berry ORM 不接管存储，是因为前端的数据来源通常是后端接口或 IndexedDB，而很多成熟的用来包装这些数据源的框架早已经存在了。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);